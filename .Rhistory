# Convert the KPI data into a data frame for easier analysis
return(dataList$values)
}
)
)
server <- function(input, output) {
kolada <- rkolada$new()
observeEvent(input$search_id, {
data <- kolada$getDataID(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$idTable <- renderDataTable({
datatable(data)
})
})
observeEvent(input$search_kw, {
data <- kolada$getDataKW(kw = input$kw, entity = input$entity)
output$kwTable <-renderDataTable({
datatable(data)
})
})
}
rkolada <- rkolada()
rkolada$getDataKW(kw = "kpi", entity = "Män som tar ut tillfällig föräldrapenning")
rkolada$getDataKW(entity= "kpi", title = "Män som tar ut tillfällig föräldrapenning")
rkolada <- setRefClass(
"rkolada",
fields = list(
api = "character",
kpiData = "character"
),
methods = list(
initialize = function() {
.self$api <- "http://api.kolada.se/v2"
.self$kpiData <- "data/kpi"
},
getDataID = function(kpi_id = NA, municipality_id = NA, year = NA) {
queryUrl <- paste0(.self$api, "/", .self$kpiData, "/", kpi_id, "/municipality/", municipality_id, "/year/", year)
response <- GET(queryUrl)
if (status_code(response) != 200) {
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
data <- parseJson(response)
values <- data$values[[1]]
data$values <- NULL
data$value <- values$value
data$gender <- values$gender
data$status <- values$status
data$count <- values$count
return(as.data.frame(data))
},
getDataKW = function(entity, title){
title_en = URLencode(title)
queryUrl <- paste0(.self$api, "/", entity, "?title=", title_en)
print(queryUrl)
response <- GET(queryUrl)
if (status_code(response) != 200){
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
data <- parseJson(response)
return(as.data.frame(data))
},
parseJson = function(response){
# Parse the JSON response into an R list
dataJson <- content(response, as = "text", encoding = "UTF-8")
dataList <- fromJSON(dataJson)
# Extract the relevant KPI data from the JSON structure
if (length(dataList$values) == 0) {
return("No data available for the specified query.")
}
# Convert the KPI data into a data frame for easier analysis
return(dataList$values)
}
)
)
rkolada <- rkolada()
rkolada$getDataKW(entity= "kpi", title = "Män som tar ut tillfällig föräldrapenning")
rkolada$getDataKW(entity= "kpi", title = "Kommunalekonomisk utjämning kommun, dividerat med antal invånare totalt 31/12 . Källa: SCB.")
rkolada$getDataKW(entity= "kpi", title = "Kommunalekonomisk.")\
rkolada$getDataKW(entity= "kpi", title = "Kommunalekonomisk.")
rkolada$getDataKW(entity= "kpi", title = "Kommunalekonomisk")
rkolada$getDataKW(entity= "kpi", title = "Kommuna")
View(data)
data <- rkolada$getDataKW(entity= "kpi", title = "Ko.")
data <- rkolada$getDataKW(entity= "kpi", title = "med")
data <- rkolada$getDataKW(entity= "kpi", title = "Kommunindex")
data <- rkolada$getDataKW(entity= "kpi", title = "Kommunindex för tema")
data <- rkolada$getDataKW(entity= "kpi", title = "Kommunindex för")
data <- rkolada$getDataKW(entity= "kpi", title = "Kommunindex för tema")
data <- rkolada$getDataKW(entity= "kpi", title = "Kommunindex för")
observeEvent(input$search_kw, {
data <- kolada$getDataKW(kw = input$title, entity = input$entity)
output$kwTable <-renderDataTable({
datatable(data)
})
})
uiMain <- page_fillable(
navset_card_tab(
nav_panel(title = "Start",
h1("Introduction"),
p("Kolada is an open and free database with over 6000 key figures and several different analysis functions.
The purpose is to support the work of analysis, comparisons and follow-up in municipalities and regions."),
p("This Shiny application access data via API from Kolada, implementing search data in some specific topics and data ID.
And if you want to learn further information"),
a("Go to Kolada", href = "https://www.kolada.se")
),
nav_panel(title = "Search Data Based On ID",
h1("Input ID (Separated by string of many ids)"),
textInput(
inputId = "kpi",
label = "KPI ID",
value = "example: N00003",
placeholder = "Enter KPI ID for first input"
),
textInput(
inputId = "municipality",
label = "Municipality ID",
placeholder = "Enter municipality ID for second input"
),
textInput(
inputId = "year",
label = "Year",
value = "2023",
placeholder = "Enter year for third input"
),
actionButton(
inputId = "search_id",
label = "search"
),
dataTableOutput("idTable")
),
nav_panel(title = "Search Data Based On Topics",
selectInput(
inputId = "entity",
label = "Select entity below:",
list("KPI" = "kpi", "KPI Group" = "kpi_groups", "Municipality" = "municipality", "Municipality Groups" = "municipality_groups", "OU" = "ou"),
multiple = FALSE
),
textInput(
inputId = "title",
label = "title",
value = "Män som tar ut tillfällig föräldrapenning",
placeholder = "Enter the keywords you want to search"
),
actionButton(
inputId = "search_kw",
label = "search keywords"
),
dataTableOutput("kwTable")
),
),
id = "main"
)
runApp()
library(shiny)
library(DT)
source("server.R")
source("uiMain.R")
shinyApp(ui = uiMain, server = server)
uiMain <- page_fillable(
navset_card_tab(
nav_panel(title = "Start",
h1("Introduction"),
p("Kolada is an open and free database with over 6000 key figures and several different analysis functions.
The purpose is to support the work of analysis, comparisons and follow-up in municipalities and regions."),
p("This Shiny application access data via API from Kolada, implementing search data in some specific topics and data ID.
And if you want to learn further information"),
a("Go to Kolada", href = "https://www.kolada.se")
),
nav_panel(title = "Search Data Based On ID",
h1("Input ID (Separated by string of many ids)"),
textInput(
inputId = "kpi",
label = "KPI ID",
value = "example: N00003",
placeholder = "Enter KPI ID for first input"
),
textInput(
inputId = "municipality",
label = "Municipality ID",
value = "0114",
placeholder = "Enter municipality ID for second input"
),
textInput(
inputId = "year",
label = "Year",
value = "2023",
placeholder = "Enter year for third input"
),
actionButton(
inputId = "search_id",
label = "search"
),
dataTableOutput("idTable")
),
nav_panel(title = "Search Data Based On Topics",
selectInput(
inputId = "entity",
label = "Select entity below:",
list("KPI" = "kpi", "KPI Group" = "kpi_groups", "Municipality" = "municipality", "Municipality Groups" = "municipality_groups", "OU" = "ou"),
multiple = FALSE
),
textInput(
inputId = "title",
label = "title",
value = "Män som tar ut tillfällig föräldrapenning",
placeholder = "Enter the keywords you want to search"
),
actionButton(
inputId = "search_kw",
label = "search keywords"
),
dataTableOutput("kwTable")
),
),
id = "main"
)
runApp()
library(shiny)
library(DT)
source("server.R")
source("uiMain.R")
shinyApp(ui = uiMain, server = server)
library(shiny)
library(DT)
source("server.R")
source("uiMain.R")
shinyApp(ui = uiMain, server = server)
library(httr)
library(jsonlite)
rkolada <- setRefClass(
"rkolada",
fields = list(
api = "character",
kpiData = "character"
),
methods = list(
initialize = function() {
.self$api <- "http://api.kolada.se/v2"
.self$kpiData <- "data/kpi"
},
getDataID = function(kpi_id = NA, municipality_id = NA, year = NA) {
queryUrl <- paste0(.self$api, "/", .self$kpiData, "/", kpi_id, "/municipality/", municipality_id, "/year/", year)
response <- GET(queryUrl)
if (status_code(response) != 200) {
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
data <- parseJson(response)
values <- data$values[[1]]
data$values <- NULL
data$value <- values$value
data$gender <- values$gender
data$status <- values$status
data$count <- values$count
return(as.data.frame(data))
},
getDataKW = function(entity  = NA, title = NA){
title_en = URLencode(title)
queryUrl <- paste0(.self$api, "/", entity, "?title=", title_en)
response <- GET(queryUrl)
if (status_code(response) != 200){
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
data <- parseJson(response)
return(as.data.frame(data))
},
parseJson = function(response){
# Parse the JSON response into an R list
dataJson <- content(response, as = "text", encoding = "UTF-8")
dataList <- fromJSON(dataJson)
# Extract the relevant KPI data from the JSON structure
if (length(dataList$values) == 0) {
return("No data available for the specified query.")
}
# Convert the KPI data into a data frame for easier analysis
return(dataList$values)
}
)
)
server <- function(input, output) {
kolada <- rkolada$new()
observeEvent(input$search_id, {
data <- kolada$getDataID(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$idTable <- renderDataTable({
datatable(data)
})
})
observeEvent(input$search_kw, {
data <- kolada$getDataKW(title = input$title, entity = input$entity)
output$kwTable <-renderDataTable({
datatable(data)
})
})
}
library(httr)
library(jsonlite)
rkolada <- setRefClass(
"rkolada",
fields = list(
api = "character",
kpiData = "character"
),
methods = list(
initialize = function() {
.self$api <- "http://api.kolada.se/v2"
.self$kpiData <- "data/kpi"
},
getDataID = function(kpi_id = NA, municipality_id = NA, year = NA) {
queryUrl <- paste0(.self$api, "/", .self$kpiData, "/", kpi_id, "/municipality/", municipality_id, "/year/", year)
response <- GET(queryUrl)
if (status_code(response) != 200) {
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
data <- parseJson(response)
values <- data$values[[1]]
data$values <- NULL
data$value <- values$value
data$gender <- values$gender
data$status <- values$status
data$count <- values$count
return(as.data.frame(data))
},
getDataKW = function(entity  = NA, title = NA){
title_en = URLencode(title)
queryUrl <- paste0(.self$api, "/", entity, "?title=", title_en)
response <- GET(queryUrl)
if (status_code(response) != 200){
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
data <- parseJson(response)
return(as.data.frame(data))
},
parseJson = function(response){
# Parse the JSON response into an R list
dataJson <- content(response, as = "text", encoding = "UTF-8")
dataList <- fromJSON(dataJson)
# Extract the relevant KPI data from the JSON structure
if (length(dataList$values) == 0) {
return("No data available for the specified query.")
}
# Convert the KPI data into a data frame for easier analysis
return(dataList$values)
}
)
)
server <- function(input, output) {
kolada <- rkolada$new()
observeEvent(input$search_id, {
data <- kolada$getDataID(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$idTable <- renderDataTable({
datatable(data)
})
})
observeEvent(input$search_kw, {
data <- kolada$getDataKW(title = input$title, entity = input$entity)
output$kwTable <-renderDataTable({
datatable(data)
})
})
}
library(shiny)
library(DT)
source("server.R")
source("uiMain.R")
shinyApp(ui = uiMain, server = server)
library(httr)
library(jsonlite)
library(DT)
rkolada <- setRefClass(
"rkolada",
fields = list(
api = "character",
kpiData = "character"
),
methods = list(
initialize = function() {
.self$api <- "http://api.kolada.se/v2"
.self$kpiData <- "data/kpi"
},
getDataID = function(kpi_id = NA, municipality_id = NA, year = NA) {
queryUrl <- paste0(.self$api, "/", .self$kpiData, "/", kpi_id, "/municipality/", municipality_id, "/year/", year)
print(queryUrl)
response <- GET(queryUrl)
if (status_code(response) != 200) {
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
data <- parseJson(response)
values <- data$values[[1]]
data$values <- NULL
data$value <- values$value
data$gender <- values$gender
data$status <- values$status
data$count <- values$count
return(as.data.frame(data))
},
getDataKW = function(entity  = NA, title = NA){
title_en = URLencode(title)
queryUrl <- paste0(.self$api, "/", entity, "?title=", title_en)
print(queryUrl)
response <- GET(queryUrl)
if (status_code(response) != 200){
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
data <- parseJson(response)
return(as.data.frame(data))
},
parseJson = function(response){
# Parse the JSON response into an R list
dataJson <- content(response, as = "text", encoding = "UTF-8")
dataList <- fromJSON(dataJson)
# Extract the relevant KPI data from the JSON structure
if (length(dataList$values) == 0) {
return("No data available for the specified query.")
}
# Convert the KPI data into a data frame for easier analysis
return(dataList$values)
}
)
)
server <- function(input, output) {
kolada <- rkolada$new()
observeEvent(input$search_id, {
data <- kolada$getDataID(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$idTable <- renderDataTable({
datatable(data)
})
})
observeEvent(input$search_kw, {
data <- kolada$getDataKW(title = input$title, entity = input$entity)
output$kwTable <-renderDataTable({
datatable(data)
})
})
}
library(shiny)
library(bslib)
uiMain <- page_fillable(
navset_card_tab(
nav_panel(title = "Start",
h1("Introduction"),
p("Kolada is an open and free database with over 6000 key figures and several different analysis functions.
The purpose is to support the work of analysis, comparisons and follow-up in municipalities and regions."),
p("This Shiny application access data via API from Kolada, implementing search data in some specific topics and data ID.
And if you want to learn further information"),
a("Go to Kolada", href = "https://www.kolada.se")
),
nav_panel(title = "Search Data Based On ID",
h1("Input ID (Separated by string of many ids)"),
textInput(
inputId = "kpi",
label = "KPI ID",
value = "N00003",
placeholder = "Enter KPI ID for first input"
),
textInput(
inputId = "municipality",
label = "Municipality ID",
value = "0114",
placeholder = "Enter municipality ID for second input"
),
textInput(
inputId = "year",
label = "Year",
value = "2023",
placeholder = "Enter year for third input"
),
actionButton(
inputId = "search_id",
label = "search"
),
DTOutput("idTable")
),
nav_panel(title = "Search Data Based On Topics",
selectInput(
inputId = "entity",
label = "Select entity below:",
list("KPI" = "kpi", "KPI Group" = "kpi_groups", "Municipality" = "municipality", "Municipality Groups" = "municipality_groups", "OU" = "ou"),
multiple = FALSE
),
textInput(
inputId = "title",
label = "title",
value = "Kommunindex för",
placeholder = "Enter the keywords you want to search"
),
actionButton(
inputId = "search_kw",
label = "search keywords"
),
DTOutput("kwTable")
),
),
id = "main"
)
runApp()
library(shiny)
library(DT)
source("server.R")
source("uiMain.R")
shinyApp(ui = uiMain, server = server)
runApp()
runApp
runApp(getwd())
uiMain
runApp()
getwd()
?runApp
getwd()
library(shiny)
library(DT)
source("server.R")
source("uiMain.R")
runApp(appDir = getwd())
runApp()
