object$GetKpiData(kpiid,mid,year)
library(httr)
library(jsonlite)
rkolada <- setRefClass(
"rkolada",
fields = list(
api = "character",
kpiData = "character"
),
methods = list(
# constructor
initialize = function() {
cat("rkolada object created.\n")
.self$api <- "http://api.kolada.se/v2"
.self$kpiData <- "data/kpi"
},
GetKpiData = function(kpi_id = NA, municipality_id = NA, year = NA) {
# Construct the full API URL using provided KPI ID, Municipality ID, and Year
queryUrl <- paste0(.self$api, "/", .self$kpiData, "/", kpi_id, "/municipality/", municipality_id, "/year/", year)
# Make the GET request to the Kolada API
response <- GET(queryUrl)
# Check if the request was successful
if (status_code(response) != 200) {
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
kpiData <- parseJson(response)
# Return the structured KPI data as a data frame
return(as.data.frame(kpiData))
},
parseJson = function(response){
# Parse the JSON response into an R list
dataJson <- content(response, as = "text", encoding = "UTF-8")
dataList <- fromJSON(dataJson)
# Extract the relevant KPI data from the JSON structure
if (length(dataList$values) == 0) {
return("No data available for the specified query.")
}
# Convert the KPI data into a data frame for easier analysis
return(dataList$values)
}
)
)
object <- rkolada()
object$GetKpiData(kpiid,mid,year)
year <- 2023
library(httr)
library(jsonlite)
rkolada <- setRefClass(
"rkolada",
fields = list(
api = "character",
kpiData = "character"
),
methods = list(
# constructor
initialize = function() {
cat("rkolada object created.\n")
.self$api <- "http://api.kolada.se/v2"
.self$kpiData <- "data/kpi"
},
GetKpiData = function(kpi_id = NA, municipality_id = NA, year = NA) {
# Construct the full API URL using provided KPI ID, Municipality ID, and Year
queryUrl <- paste0(.self$api, "/", .self$kpiData, "/", kpi_id,"/year/", year)
# https://api.kolada.se/v2/data/kpi/N00003/year/2023
# Make the GET request to the Kolada API
response <- GET(queryUrl)
# Check if the request was successful
if (status_code(response) != 200) {
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
kpiData <- parseJson(response)
# Return the structured KPI data as a data frame
return(as.data.frame(kpiData))
},
parseJson = function(response){
# Parse the JSON response into an R list
dataJson <- content(response, as = "text", encoding = "UTF-8")
dataList <- fromJSON(dataJson)
# Extract the relevant KPI data from the JSON structure
if (length(dataList$values) == 0) {
return("No data available for the specified query.")
}
# Convert the KPI data into a data frame for easier analysis
return(dataList$values)
}
)
)
object <- rkolada()
object$GetKpiData(kpiid,mid,year)
install.packages("DT")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
library(shiny)
library(DT)
ui <- fluidPage(
titlePanel("Shiny App with Sidebar"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "kpi",
label = "KPI ID",
value = "",
placeholder = "Enter KPI ID for first input"),
textInput(
inputId = "municipality",
label = "Municipality ID",
value = "",
placeholder = "Enter municipality ID for second input"),
textInput(
inputId = "year",
label = "Year",
value = "",
placeholder = "Enter year for third input"),
actionButton(inputId = "search",
label = "search")
),
mainPanel(
h3("The data you selected:"),
textOutput("demo")
)
)
)
server <- function(input, output, session) {
source("Server.R")
observeEvent(input$search, {
kolada <- rkolada()
data <- kolada$GetKpiData(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$demo <- renderDataTable({datatable(data)})
})
}
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
library(shiny)
library(DT)
ui <- fluidPage(
titlePanel("Shiny App with Sidebar"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "kpi",
label = "KPI ID",
value = "",
placeholder = "Enter KPI ID for first input"),
textInput(
inputId = "municipality",
label = "Municipality ID",
value = "",
placeholder = "Enter municipality ID for second input"),
textInput(
inputId = "year",
label = "Year",
value = "",
placeholder = "Enter year for third input"),
actionButton(inputId = "search",
label = "search")
),
mainPanel(
h3("The data you selected:"),
dataTableOutput("demo")
)
)
)
server <- function(input, output, session) {
source("Server.R")
observeEvent(input$search, {
kolada <- rkolada()
data <- kolada$GetKpiData(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$demo <- renderDataTable({
datatable(data)})
})
}
shinyApp(ui = ui, server = server)
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
library(shiny)
library(DT)
ui <- fluidPage(
titlePanel("Shiny App with Sidebar"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "kpi",
label = "KPI ID",
value = "N00003",
placeholder = "Enter KPI ID for first input"),
textInput(
inputId = "municipality",
label = "Municipality ID",
value = "",
placeholder = "Enter municipality ID for second input"),
textInput(
inputId = "year",
label = "Year",
value = "2023",
placeholder = "Enter year for third input"),
actionButton(inputId = "search",
label = "search")
),
mainPanel(
h3("The data you selected:"),
dataTableOutput("demo")
)
)
)
server <- function(input, output, session) {
source("Server.R")
observeEvent(input$search, {
kolada <- rkolada()
data <- kolada$GetKpiData(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$demo <- renderDataTable({
datatable(data)})
})
}
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
library(shiny)
library(DT)
ui <- fluidPage(
titlePanel("Shiny App with Sidebar"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "kpi",
label = "KPI ID",
value = "N00003",
placeholder = "Enter KPI ID for first input"),
textInput(
inputId = "municipality",
label = "Municipality ID",
value = "",
placeholder = "Enter municipality ID for second input"),
textInput(
inputId = "year",
label = "Year",
value = "2023",
placeholder = "Enter year for third input"),
actionButton(inputId = "search",
label = "search")
),
mainPanel(
h3("The data you selected:"),
dataTableOutput("demo")
)
)
)
server <- function(input, output, session) {
source("Server.R")
observeEvent(input$search, {
kolada <- rkolada()
data <- kolada$GetKpiData(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$demo <- renderDataTable({
datatable(data)})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(DT)
ui <- fluidPage(
titlePanel("Shiny App with Sidebar"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "kpi",
label = "KPI ID",
value = "N00003",
placeholder = "Enter KPI ID for first input"),
textInput(
inputId = "municipality",
label = "Municipality ID",
value = "",
placeholder = "Enter municipality ID for second input"),
textInput(
inputId = "year",
label = "Year",
value = "2023",
placeholder = "Enter year for third input"),
actionButton(inputId = "search",
label = "search")
),
mainPanel(
h3("The data you selected:"),
dataTableOutput("demo")
)
)
)
server <- function(input, output, session) {
source("Server.R")
observeEvent(input$search, {
kolada <- rkolada()
data <- kolada$GetKpiData(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$demo <- renderDataTable({
datatable(data)})
})
}
runApp()
shinyApp(ui = ui, server = server)
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
library(shiny)
library(DT)
ui <- fluidPage(
titlePanel("Shiny App with Sidebar"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "kpi",
label = "KPI ID",
value = "N00003",
placeholder = "Enter KPI ID for first input"),
textInput(
inputId = "municipality",
label = "Municipality ID",
value = "0000",
placeholder = "Enter municipality ID for second input"),
textInput(
inputId = "year",
label = "Year",
value = "2023",
placeholder = "Enter year for third input"),
actionButton(inputId = "search",
label = "search")
),
mainPanel(
h3("The data you selected:"),
dataTableOutput("demo")
)
)
)
server <- function(input, output, session) {
source("Server.R")
observeEvent(input$search, {
kolada <- rkolada()
data <- kolada$GetKpiData(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$demo <- renderDataTable({
datatable(data)})
})
}
shinyApp(ui = ui, server = server)
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
library(shiny)
library(DT)
ui <- fluidPage(
titlePanel("Shiny App with Sidebar"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "kpi",
label = "KPI ID",
value = "N00003",
placeholder = "Enter KPI ID for first input"),
textInput(
inputId = "municipality",
label = "Municipality ID",
value = "0000",
placeholder = "Enter municipality ID for second input"),
textInput(
inputId = "year",
label = "Year",
value = "2023",
placeholder = "Enter year for third input"),
actionButton(inputId = "search",
label = "search")
),
mainPanel(
h3("The data you selected:"),
dataTableOutput("demo")
)
)
)
server <- function(input, output, session) {
source("Server.R")
observeEvent(input$search, {
kolada <- rkolada()
data <- kolada$GetKpiData(kpi_id = input$kpi, municipality_id = input$municipality, year = input$year)
output$demo <- renderDataTable({
datatable(data)})
})
}
shinyApp(ui = ui, server = server)
runApp()
getwd()
shiny::runApp()
shiny::runApp("app.R")
?runApp
shiny::runApp(getwd())
getwd()
setwd("C:/Users/崔庆轩喜欢摆/Desktop/LastSta_Liu/Rprogramming/PracticeAfterClass/R/Shiny/app.R")
?runApp
shiny::runApp(getwd())
shiny::runApp("app.R")
install.packages("DT")
shiny::runApp()
runApp()
library(httr)
library(jsonlite)
rkolada <- setRefClass(
"rkolada",
fields = list(
api = "character",
kpiData = "character"
),
methods = list(
# constructor
initialize = function() {
cat("rkolada object created.\n")
.self$api <- "http://api.kolada.se/v2"
.self$kpiData <- "data/kpi"
},
GetKpiData = function(kpi_id = NA, municipality_id = NA, year = NA) {
# Construct the full API URL using provided KPI ID, Municipality ID, and Year
queryUrl <- paste0(.self$api, "/", .self$kpiData, "/", kpi_id,"/year/", year)
# https://api.kolada.se/v2/data/kpi/N00003/year/2023
# Make the GET request to the Kolada API
response <- GET(queryUrl)
# Check if the request was successful
if (status_code(response) != 200) {
stop("Error: Unable to fetch data. Status code: ", status_code(response))
}
kpiData <- parseJson(response)
# Return the structured KPI data as a data frame
return(as.data.frame(kpiData))
},
parseJson = function(response){
# Parse the JSON response into an R list
dataJson <- content(response, as = "text", encoding = "UTF-8")
dataList <- fromJSON(dataJson)
# Extract the relevant KPI data from the JSON structure
if (length(dataList$values) == 0) {
return("No data available for the specified query.")
}
# Convert the KPI data into a data frame for easier analysis
return(dataList$values)
}
)
)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp("app.R")
runApp()
runApp("app.R")
runApp()
runApp()
server <- function(input, output){}
source("ui.R")
shinyApp(ui = ui, server = server)
ui
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
debug(server)
server(input,output)
runApp()
?server
?shinyApp
runApp()
runApp()
source("ui.R")
shinyApp(ui = ui, server = function(input , output){})
runApp()
runApp()
runApp()
runApp()
runApp()
